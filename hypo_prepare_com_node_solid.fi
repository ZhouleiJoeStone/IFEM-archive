!--------------
!Corresponding changes to save space
! Already be declared in hypo_declaration_part.fi
allocate (node_test(nn_solid))
allocate (node_test_g(nn_solid))
!--------------

node_test(:)=0
node_test_g(:) = 0
!===================
! Note: the connectivity matrix for solid has different dimension definition from fluid
!===================
do icount=1,ne_intlocal_solid
	do jcount=1,nen_solid
	node_test(solid_fem_con(ien_intlocal_solid(icount),jcount))=1
	end do
end do


! set nodes included by the elements in each processor to be 1
call mpi_reduce(node_test(1),node_test_g(1),nn_solid,mpi_integer,mpi_sum,0,mpi_comm_world,ierror)
call mpi_bcast(node_test_g(1),nn_solid,mpi_integer,0,mpi_comm_world,ierror)
call mpi_barrier(mpi_comm_world,ierror)
! nodes needed communication in node_test_g is larger than 1
count=0
!write(*,*) 'I am here', 'myid', myid
do icount=1,nn_solid
	if (node_test_g(icount) .gt. 1) then
	count=count+1
	end if
end do
nn_global_com_solid=count
! # of nodes needs communication globally

allocate(global_com_solid(nn_global_com_solid))

!=======================================
! Find nei_max : max # of proc's sharing one node
nei_max_solid = maxval(node_test_g(:))
if (myid == 0) write(*,*) 'nei_max_solid', nei_max_solid


count=0
do icount=1,nn_solid
        if (node_test_g(icount) .gt. 1) then
        count=count+1
        global_com_solid(count)=icount
        end if
end do
! global node index for communication
call mpi_barrier(mpi_comm_world,ierror)

write(*,*) 'myid', myid, 'nn_global_com_solid',nn_global_com_solid


count=0
node_test(:)=0
do icount=1,ne_intlocal_solid
	jcount=ien_intlocal_solid(icount)
	do kcount=1,nen_solid
	node_test(solid_fem_con(jcount,kcount))=1
	end do
end do

do icount=1,nn_global_com_solid
        if (node_test(global_com_solid(icount)) == 1) then
        count=count+1
        end if
end do
nn_local_com_solid=count
! # of nodes needs communication locally on each processor

call mpi_barrier(mpi_comm_world,ierror)
write(*,*) 'myid', myid, 'nn_local_com_solid',nn_local_com_solid

allocate(local_com_solid(nn_local_com_solid))


count=0
do icount=1,nn_global_com_solid
	if (node_test(global_com_solid(icount)) == 1) then
	count=count+1
	local_com_solid(count)=icount
	end if
end do
! local index in the communication region on each processor


!==========================================
! Give the dimenstion of local_nei matrix
allocate(local_nei_solid(nn_local_com_solid,nei_max_solid+1))


local_nei_solid(:,:)=-999

call mpi_barrier(mpi_comm_world,ierror)

call setnei_new(global_com_solid,nn_global_com_solid,local_com_solid,nn_local_com_solid, &
            local_nei_solid,nei_max_solid,ad_length_solid)

allocate(send_address_solid(ad_length_solid,2))


kcount=0
do icount=1,nn_local_com_solid
	do jcount=2,nei_max_solid+1
		if ((local_nei_solid(icount,jcount) .ne. myid) .and. (local_nei_solid(icount,jcount) .ne. -999 )) then
		kcount=kcount+1
		send_address_solid(kcount,1)=local_nei_solid(icount,jcount)
		send_address_solid(kcount,2)=local_nei_solid(icount,1)
		end if
	end do
end do

call bubblesort_solid(send_address_solid,ad_length_solid,2,1) ! sort the address book for the solid mesh
!row 1 of send_address is the proc id sharing the edge nodes
!-------------
! Deallocate variables
deallocate(node_test)
deallocate(node_test_g)
