!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!   FEM Navier Stokes fluid solver
!     incompressible, implicit
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
     write(*,*) "*** Solving Fluids: calculate fluid field ***"

    !...store the variables from the previous time step,dold=d 
     dold = d
     call formid(id,rng,ien)
     call formd(d,rng,ien)
     do iit=1,nit
        p(:,:) = 0.0d0
        w(:,:) = 0.0d0


         call block(x,d,dold,p,w,hg,ien,f_fluids,rng,f_stress)

!===========================================================================
if (edge_inflow .ne. 0) then
! Apply nature boundary condition
write (*,*) 'Apply nature BC'
        call nature_pre(x,d,ien,rng,bc4el,ne_inflow,edge_inflow,pin,res_bc)
        p(1,:) = p(1,:) + res_bc(1,:)
end if 
        !...apply boundary conditions, calculate residual with corrected BC
        !...i.e. where id=0 -> p=0
         call setid(p,id,ndf)


        !...calculate the normalized error, res_l
         call getnorm(p,p,ndf*nn,res_l)
         res_l= sqrt(res_l/nq)

        !...calculate the increment(delta_d) for each degree of freedom, dg
         dg(:,:) = 0.0d0
        call gmres(x,d,dold,id,w,p,dg,hg,ien,    &
                z,v,zg,avg,sm,vloc,avloc,h_gmres,y_gmres,cc,ss,f_fluids)
	
        !...calculate the normalized increment, del_l
         call getnorm(dg,dg,ndf*nn,del_l)
         del_l = sqrt(del_l/nq)
        !...update the calculated variables, d=d+dg
         call update(p, d, dg, ndf)

        !...output the errors in each iteration
         write(6,102) iit,res_l,del_l
         write(7,102) iit,res_l,del_l
      enddo

      write(*,'("  maximum fluid velocity (x dir) = ",f8.5)') maxval(d(1:nsd,:))

