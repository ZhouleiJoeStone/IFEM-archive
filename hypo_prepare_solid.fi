

  allocate(solid_fem_con_1(ne_solid_1,nen_solid),stat=error_id)
  allocate(solid_surface_1(ne_solid_1,nen_solid),stat=error_id)
  allocate(coor_1(nn_solid_1,nsd_solid),stat=error_id)

 !...read element connectivity for one structure
  call readien_solid(solid_fem_con_1,ne_solid_1,nen_solid)

 !...read coordinates for one structure
  call readx_solid(coor_1,nn_solid_1,nsd_solid)

 !...read surface information (which element surface is part of the structure surface
 ! call readrng_solid(solid_surface_1,ne_solid_1,nen_solid)	

 !...scale structure
  coor_1(:,1:3)=coor_1(:,1:3)*solid_scale

 !...copy the one structure to multiple (n_solid) identical structures
  do i=1,n_solid
     solid_coor_init(1,nn_solid_1*(i-1)+1:nn_solid_1*i) = coor_1(1:nn_solid_1,1) + shift(1,i)
     solid_coor_init(2,nn_solid_1*(i-1)+1:nn_solid_1*i) = coor_1(1:nn_solid_1,2) + shift(2,i)
     solid_coor_init(3,nn_solid_1*(i-1)+1:nn_solid_1*i) = coor_1(1:nn_solid_1,3) + shift(3,i)
     solid_fem_con(ne_solid_1*(i-1)+1:ne_solid_1*i,1:nen_solid) = solid_fem_con_1(1:ne_solid_1,1:nen_solid) + (i-1)*nn_solid_1
!     solid_surface(ne_solid_1*(i-1)+1:ne_solid_1*i,1:nen_solid) = solid_surface_1(1:ne_solid_1,1:nen_solid) + (i-1)*nn_solid_1
  enddo
      
  deallocate(solid_fem_con_1,stat=error_id)
  deallocate(solid_surface_1,stat=error_id)
  deallocate(coor_1,stat=error_id)
  deallocate(shift,stat=error_id)  

 !...read essential boundary conditions (displacement)
  call solid_fem_BC_read_essential

 !...output file setting for contineous writing (please comment out unused stuff)
 !...Matlab output for falling sphere
	write(*,*) 'nrestart=',nrestart
  if (nrestart.ne.0) then
	write(*,*) 'RESTART'
     open(9500,file='vel_time.m',position='append')
  else
     open(9500, file='vel_time.m', status='unknown')
  endif

 !...initialize arrays
  solid_coor_curr(1:3,1:nn_solid) = solid_coor_init(1:3,1:nn_solid)
  solid_force_FSI(1:3,1:nn_solid) = 0.0d0

  call r_sinit(solid_coor_init,solid_coor_curr)

  solid_prevel(1:3,1:nn_solid)=0.0d0

	if (nrestart>0) then
	 call read_x(nrestart,solid_coor_curr)
       call read_vel(nrestart, solid_vel, dn, solid_accel)
	 solid_prevel=solid_vel
	 du(1:3,1:nn_solid)=solid_vel(1:3,1:nn_solid)*dt
	 !write(*,*) 'vel=',solid_vel(1,1),solid_vel(2,1),solid_vel(3,1)
       !write(*,*) 'accel=',solid_accel(1,1),solid_accel(2,1),solid_accel(3,1)
	 !write(*,*) 'solid_coor_curr=',solid_coor_curr(1,1),solid_coor_curr(2,1)
      endif  
  if (nen_solid == 4) then
     call quad3d4n(iquad_solid, nquad_solid, xq_solid, wq_solid, nsdpad_solid, nquadpad_solid)
  else if (nen_solid == 8) then
     call quad3d8n(iquad_solid, nquad_solid, xq_solid, wq_solid, nsdpad_solid, nquadpad_solid)
  end if

  open(unit=333,file="force_fsi.txt")