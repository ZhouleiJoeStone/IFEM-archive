  if (nsd_solid==2) then
	if (nen_solid == 3) then
        call quad2d3n(iquad_solid, nquad_solid, xq_solid, wq_solid, nsdpad_solid, nquadpad_solid)
	elseif (nen_solid == 4) then
        call quad2d4n(iquad_solid, nquad_solid, xq_solid, wq_solid, nsdpad_solid, nquadpad_solid)
	endif
  elseif (nsd_solid==3) then
	if (nen_solid == 4) then
        call quad3d4n(iquad_solid, nquad_solid, xq_solid, wq_solid, nsdpad_solid, nquadpad_solid)
	elseif (nen_solid == 8) then
        call quad3d8n(iquad_solid, nquad_solid, xq_solid, wq_solid, nsdpad_solid, nquadpad_solid)
	endif
  endif

  allocate(solid_fem_con_1(ne_solid_1,nen_solid),stat=error_id)
  allocate(coor_1(nn_solid_1,nsd_solid),stat=error_id)
 !...read element connectivity for one structure
  call readien_solid(solid_fem_con_1,ne_solid_1,nen_solid,mat_part)
 !...read coordinates for one structure
  call readx_solid(coor_1,nn_solid_1,nsd_solid,n_bc,bc_type)

 !...scale structure
  do i=1,nsd_solid
     coor_1(:,i)=coor_1(:,i)*solid_scale(i)
  enddo

 !...copy the one structure to multiple (n_solid) identical structures
  do i=1,n_solid
      do j=1,nsd_solid
	  solid_coor_init(j,nn_solid_1*(i-1)+1:nn_solid_1*i) = coor_1(1:nn_solid_1,j) + shift(j,i)
	enddo
     solid_fem_con(ne_solid_1*(i-1)+1:ne_solid_1*i,1:nen_solid) = solid_fem_con_1(1:ne_solid_1,1:nen_solid) + (i-1)*nn_solid_1
  enddo
  
  deallocate(solid_fem_con_1,stat=error_id)
  deallocate(coor_1,stat=error_id)
  deallocate(shift,stat=error_id)  

 !...read essential boundary conditions (displacement)
  call solid_fem_BC_read_essential(n_bc,bc_type)

 !...initialize arrays
  solid_coor_curr(1:nsd_solid,1:nn_solid) = solid_coor_init(1:nsd_solid,1:nn_solid)
  solid_force_FSI(1:nsd_solid,1:nn_solid) = 0.0d0

  solid_prevel(1:nsd_solid,1:nn_solid)    = 0.0d0

  if (ninit .eq. 1) then
     call r_sreadinit(solid_coor_init,solid_coor_curr)
  endif


