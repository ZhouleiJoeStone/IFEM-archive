!--------------
!Corresponding changes to save space
allocate (partele(ne_solid))
allocate (partnode(nn_solid))
allocate (tmp_index(ne_solid))


! Read in partition information for connectivity matrix
call readpartele_solid(partele)
! Read in partition information for nodes
call readpartnode_solid(partnode)

nn_local_solid=0
ne_local_solid=0
ne_intlocal_solid=0

! Get subregion-->wholeregion element index for FEM interpolation
do count = 1,ne_solid
        if (partele(count) == myid) then
                ne_intlocal_solid=ne_intlocal_solid+1
        endif
end do
        allocate(ien_intlocal_solid(ne_intlocal_solid))

ne_intlocal_solid=0

do count = 1,ne_solid
        if (partele(count) == myid) then
                ne_intlocal_solid=ne_intlocal_solid+1
                ien_intlocal_solid(ne_intlocal_solid)=count
        endif
end do
! Get subregion-->wholeregion node index
do count = 1,nn_solid
	if (partnode(count) == myid) then
		nn_local_solid=nn_local_solid+1
	endif
end do

	allocate(node_local_solid(nn_local_solid))
nn_local_solid=0

do count = 1,nn_solid
        if (partnode(count) == myid) then
                nn_local_solid=nn_local_solid+1
                node_local_solid(nn_local_solid)=count
        endif
end do

! Based on node partition, get subregion-->wholeregion element index, used by solid solver 
tmp_index(:)=0
do ie=1,ne_solid
	do inen=1,nen_solid

		if (partnode(solid_fem_con(ie,inen)) == myid) then
			tmp_index(ie) = 1
		end if
	end do
end do

do ie=1,ne_solid
	if (tmp_index(ie)==1) then
		ne_local_solid=ne_local_solid+1
	end if
end do

        allocate(ien_local_solid(ne_local_solid))
ne_local_solid=0

do ie=1,ne_solid
        if (tmp_index(ie)==1) then
                ne_local_solid=ne_local_solid+1
		ien_local_solid(ne_local_solid)=ie
        end if
end do


!if (myid == 0) then
!  open (unit=20, file = 'ien_local_solid.in', status='unknown')
!do count=1,ne_local_solid
!	write(20,*) ien_local_solid(count)
!end do
!end if

write(*,*) 'myid', myid, 'nn_local_solid',nn_local_solid, 'ne_intlocal_solid', ne_intlocal_solid
!write(*,*) '====== hypo_prepare_part_solid.fi ======'

node_global_solid(:)=0

do count = 1,nn_local_solid
	node_global_solid(node_local_solid(count))=count
end do

!------------
! Deallocate variables

deallocate(partele)
deallocate(partnode)
deallocate(tmp_index)		
